#version 430 core

#ifndef DISPATCH_SIZE
#define DISPATCH_SIZE local_size_x = 1, local_size_y = 1, local_size_z = 1
#endif

layout(DISPATCH_SIZE) in;

layout(r32f, binding = 0) uniform image3D source;
uniform mat4 transform;
uniform ivec3 start_cell;
uniform vec3 tex_space_center;

uniform float strength;

float Sample(ivec3 id, ivec3 tex_dim) {
    return imageLoad(source, clamp(id, ivec3(0), tex_dim)).x;
}

vec3 Normal(ivec3 id, ivec3 tex_dim) {
    ivec3 x = ivec3(1., 0., 0.);
    ivec3 y = ivec3(0., 1., 0.);
    ivec3 z = ivec3(0., 0., 1.);
    float dx = Sample(id + x, tex_dim) - Sample(id - x, tex_dim);
    float dy = Sample(id + y, tex_dim) - Sample(id - y, tex_dim);
    float dz = Sample(id + z, tex_dim) - Sample(id - z, tex_dim);

    return normalize(vec3(dx, dy, dz));
}

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz) + start_cell;
    ivec3 im_size = ivec3(imageSize(source).xyz);
    if (id.x >= im_size.x || 
        id.y >= im_size.y || 
        id.z >= im_size.z) {
        return;
    }
        
    vec4 raw_uvw = transform * vec4(vec3(id) / (
        vec3(im_size) - vec3(1.)), 1.);

    vec3 uvw = raw_uvw.xyz / raw_uvw.w;

    float len = length(uvw);

    if (uvw.x >= 1. || uvw.x <= -1. ||
        uvw.y >= 1. || uvw.y <= -1. ||
        uvw.z >= 1. || uvw.z <= -1 ||
        len >= 1.) {
        return;
    }

    // float target_value = float(Counter.value) / (float(Counter.count) * 100000.);

    vec3 image_center_normal = Normal(ivec3(tex_space_center * vec3(im_size)), im_size);

    // vec3 transformed_normal = 
    //     normalize(transpose(inverse(mat3(transform))) * image_center_normal);

    float direction_coefficient = dot(uvw, image_center_normal);

    
    
     
    float current_value = Sample(id, im_size);
    float to_write = current_value + dot(uvw, image_center_normal) * strength * (1. - len);
    // float to_write = mix(current_value, target_value, strength);

    imageStore(source, id, vec4(clamp(to_write, 0., 1.), 0., 0., 0.));

    // atomicAdd(Counter.count, 1);
    // atomicAdd(Counter.value, uint(value * 10000));
}